spring:
  config:
    import: optional:file:.env[.properties] # `.env` 파일을 가져옴
    activate:
      on-profile: common

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        jdbc:
          time_zone: Asia/Seoul # 시간을 KTC로 설정
        format_sql: true
        #show_sql: true
        default_batch_fetch_size: 300 #ToMany관계에서 페이징 및 성능을 위한 옵션, 필요한 경우 개별 엔티티나 컬렉션에서 추가 설정

  sql:
    init:
      mode: always

logging:
  level:
    root: INFO
    org.hibernate.SQL: debug
    org.springframework: WARN
    com.example.facticle: DEBUG

server:
  port: 8080 #HTTPS에서는 기본포트로 8443을 쓰지만 어짜피 개발 과정에서 임시로 HTTPS를 쓰는 것이므로 8080을 그대로 사용
#  ssl: #개발과정에서 HTTPS를 적용하기 위해 사용, openssl로 발급한 자체 인증서로 임시 HTTPS를 적용
#    key-store: classpath:ssl/localhost.p12 # 인증서 경로 작성
#    key-store-type: PKCS12 # 인증서 형식 작성
#    key-store-password: changeit # 인증서 비밀번호를 작성 changeit은 설정하지 않았을 때의 기본값

jwt:
  #보안 상 노출되지 않는 것이 좋음 -> 추후 환경변수 등으로 관리
  #secret key는 쉘에서 openssl rand -base64 32 커맨드로 생성함, 서명화 알고리즘에서 성능이 빠른 HS256을 사용할 예정이므로 256 bit의 key를 생성
  secret: oRf96S6l4scYOnZpl747wPckC7FmrGbEPOvbVYZj8Lw=
  access-token-valid-time: 600000   # 30분 -> 10분
  refresh-token-valid-time: 3600000 # 1일 -> 1시간

cloud: #S3 설정 -> key의 경우 노출되지 않는 것이 중요 -> 베포 전 환경변수 등으로 관리
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ${AWS_REGION}
    stack:
      auto: false
    s3:
      bucket: ${AWS_BUCKET_NAME}

oauth:
  google:
    client-id: ${GOOGLE_CLIENT_ID}
    client-secret: ${GOOGLE_CLIENT_SECRET}
    redirect-uri: ${GOOGLE_REDIRECT_URI}
  kakao:
    client-id: ${KAKAO_CLIENT_ID}
    client-secret: ${KAKAO_CLIENT_SECRET}
    redirect-uri: ${KAKAO_REDIRECT_URI}
  naver:
    client-id: ${NAVER_CLIENT_ID}
    client-secret: ${NAVER_CLIENT_SECRET}
    redirect-uri: ${NAVER_REDIRECT_URI}
